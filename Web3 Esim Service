const express = require('express');
const cors = require('cors');
const { ethers } = require('ethers');
require('dotenv').config();

const app = express();
app.use(express.json());
app.use(cors());

// Load environment variables
if (!process.env.PRIVATE_KEY || !/^0x[a-fA-F0-9]{64}$/.test(process.env.PRIVATE_KEY)) {
    throw new Error("Invalid PRIVATE_KEY in .env file. Ensure it's a valid Ethereum private key starting with '0x'.");
}

const provider = new ethers.JsonRpcProvider(process.env.BLOCKCHAIN_RPC_URL);
const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);

const contractAddress = process.env.CONTRACT_ADDRESS;
const contractABI = require('./ESIMPaymentABI.json');
const contract = new ethers.Contract(contractAddress, contractABI, wallet);

// Dummy eSIM provider API
const ESIM_API_URL = 'https://api.example-esim.com/purchase';
const axios = require('axios');
const path = require('path');

// Serve frontend
app.use(express.static(path.join(__dirname, 'frontend/build')));

// Endpoint to handle eSIM purchases
app.post('/buy-esim', async (req, res) => {
    try {
        const { userAddress, token, amount } = req.body;
        
        // Verify payment on blockchain
        const paymentReceived = await contract.balances(userAddress);
        if (paymentReceived < amount) {
            return res.status(400).json({ error: 'Payment not verified' });
        }

        // Call eSIM provider API to issue eSIM
        const esimResponse = await axios.post(ESIM_API_URL, { userAddress, amount });
        
        if (esimResponse.data.success) {
            return res.json({ success: true, esim: esimResponse.data.esimData });
        } else {
            return res.status(500).json({ error: 'Failed to issue eSIM' });
        }
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Server error' });
    }
});

// Serve frontend for all routes
app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'frontend/build', 'index.html'));
});

// Start the server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});

// Create necessary files
const fs = require('fs');
fs.writeFileSync('package.json', `{
  "name": "web3-esim-service",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "axios": "^1.3.0",
    "cors": "^2.8.5",
    "dotenv": "^16.0.3",
    "ethers": "^6.0.0",
    "express": "^4.18.2"
  },
  "engines": {
    "node": "18.x"
  }
}`);

fs.writeFileSync('Procfile', 'web: node server.js');

fs.writeFileSync('.nixpacks.toml', `[
  phases.setup]
  nixPkgs = ["nodejs_18"]

  [phases.build]
  cmds = ["npm install"]

  [phases.start]
  cmds = ["npm start"]
`);

fs.writeFileSync('.gitignore', 'node_modules\n.env\ndist\nfrontend/node_modules\n');

// Create ESIMPaymentABI.json with a basic structure
fs.writeFileSync('ESIMPaymentABI.json', `[
  {
    "constant": true,
    "inputs": [
      {
        "name": "_user",
        "type": "address"
      }
    ],
    "name": "balances",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  }
]`);

// Create ESIMPayment.sol smart contract file
fs.writeFileSync('ESIMPayment.sol', `// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ESIMPayment {
    mapping(address => uint256) public balances;

    function deposit() public payable {
        balances[msg.sender] += msg.value;
    }

    function getBalance(address _user) public view returns (uint256) {
        return balances[_user];
    }
}`);

// Create React App components for frontend
const reactApp = `import React, { useState } from 'react';
import { ethers } from 'ethers';
import axios from 'axios';

const CONTRACT_ADDRESS = "${process.env.CONTRACT_ADDRESS}";
const CONTRACT_ABI = require('./ESIMPaymentABI.json');

function App() {
    const [userAddress, setUserAddress] = useState('');
    const [amount, setAmount] = useState('');
    const [message, setMessage] = useState('');

    const handlePurchase = async () => {
        if (!window.ethereum) return alert('Install MetaMask!');

        const provider = new ethers.BrowserProvider(window.ethereum);
        const signer = await provider.getSigner();
        const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);

        let tx;
        tx = await signer.sendTransaction({
            to: CONTRACT_ADDRESS,
            value: ethers.parseEther(amount)
        });

        await tx.wait();
        setMessage('Payment sent! Verifying...');

        const response = await axios.post('/buy-esim', { userAddress, amount });
        if (response.data.success) {
            setMessage(`eSIM Activated: ${response.data.esim}`);
        } else {
            setMessage('Error activating eSIM');
        }
    };

    return (
        <div>
            <h1>Buy eSIM with Crypto</h1>
            <input type="text" placeholder="Your Wallet Address" onChange={(e) => setUserAddress(e.target.value)} />
            <input type="text" placeholder="Amount" onChange={(e) => setAmount(e.target.value)} />
            <button onClick={handlePurchase}>Buy eSIM</button>
            <p>{message}</p>
        </div>
    );
}

export default App;
`;

fs.mkdirSync('frontend/src', { recursive: true });
fs.writeFileSync('frontend/src/App.js', reactApp);
