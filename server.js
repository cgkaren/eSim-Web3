const express = require('express');
const cors = require('cors');
const { ethers } = require('ethers');
require('dotenv').config();
const axios = require('axios');

const app = express();
app.use(express.json());
app.use(cors());

// Load environment variables
const provider = new ethers.JsonRpcProvider(process.env.BLOCKCHAIN_RPC_URL);
const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);

const contractAddress = process.env.CONTRACT_ADDRESS;
const contractABI = require('./ESIMPaymentABI.json');
const contract = new ethers.Contract(contractAddress, contractABI, wallet);

const ESIM_API_URL = "https://esim-provider.com/api/purchase"; // API –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ eSIM

// Endpoint –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫—É–ø–∫–∏ eSIM
app.post('/buy-esim', async (req, res) => {
    try {
        const { userAddress, amount } = req.body;
        
        // 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –≤ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
        const paymentReceived = await contract.getBalance(userAddress);
        const requiredAmount = ethers.parseEther(amount);

        if (paymentReceived < requiredAmount) {
            return res.status(400).json({ error: 'Payment not verified' });
        }

        console.log(`‚úÖ Payment verified for ${userAddress}. Proceeding with eSIM purchase.`);

        // 2Ô∏è‚É£ –ó–∞–ø—Ä–æ—Å –≤ API eSIM-–ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        const esimResponse = await axios.post(ESIM_API_URL, {
            userAddress: userAddress,
            quantity: 1 // –ú–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –Ω–∞ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ eSIM
        });

        if (esimResponse.data.success) {
            console.log(`üéâ eSIM successfully issued for ${userAddress}`);
            return res.json({ success: true, esimCode: esimResponse.data.esimCode });
        } else {
            console.error(`‚ùå Error purchasing eSIM: ${esimResponse.data.error}`);
            return res.status(500).json({ error: 'Failed to issue eSIM' });
        }

    } catch (error) {
        console.error(`‚ùå Server error:`, error);
        res.status(500).json({ error: 'Server error' });
    }
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
    console.log(`üöÄ Server running on port ${PORT}`);
});
